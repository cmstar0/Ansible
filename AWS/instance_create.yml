- hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yml
  tasks:

# Search for AMI (based on settings in vars.yml) from which to 
# create a new instance.
  
  - name: Find Current Version Of AMI
    ec2_ami_find:
      region: "{{ target_region }}"
      virtualization_type: "{{ target_virt_type }}"
      owner: "{{ target_ami_owner }}"
      name: "{{ target_ami_name }}"
      no_result_action: fail
      sort: name
      sort_order: descending
    register: found_amis

  
# Set the search results to our target_ami_id which will be
# used to create the instance.
   
  - set_fact:
      target_ami_id: "{{ (found_amis.results | first).ami_id }}"
    
    
# Create new instance from target_ami_id    

  - name: Create Instance From AMI
    ec2:
      region: "{{ target_region }}"
      image: "{{ target_ami_id }}"
      instance_type: "{{ target_instance_type }}"
      vpc_subnet_id: "{{ target_vpc_subnet_id }}"
      user_data: "{{ lookup('template', '{{ user_data_file }}') }}"
#    user_data: "{{ user_data_file }}" 
      instance_tags:
        Name: "{{ target_instance_name }}"
      exact_count: 1
      count_tag:
        Name: "{{ target_instance_name }}"
      group_id: "{{ target_security_groups }}"
      key_name: "{{ target_ec2_key }}"
      wait: true
      wait_timeout: 500

    register: created_instance


# Setup some os specific variables
#
  - set_fact:
      host_ip_addr: "{{ item.public_ip }}"
    with_items: "{{ created_instance.tagged_instances }}"
    when: environment_type == 'public'

  - set_fact:
      host_ip_addr: "{{ item.private_ip }}"
    with_items: "{{ created_instance.tagged_instances }}"
    when: environment_type == 'private'


  - set_fact:
      host_control_port: "{% if target_platform == 'linux' %} 22
                          {% elif target_platform == 'windows' %} 5986
                          {% endif %}"


# Verify instance has been created and is open for
# communication.  We monitor the port used by ansible
# for control.

  - name: Wait For Active Communication Port 
    wait_for:
      port: "{{ host_control_port }}" 
      host: "{{ host_ip_addr }}"
      timeout: 300


# Add new instance to inventory
  
  - name: add hosts to groups
    add_host:
      name: "{{ target_instance_name }}"
      ansible_ssh_host: "{{ host_ip_addr }}"
      groups: Newly_Created 
