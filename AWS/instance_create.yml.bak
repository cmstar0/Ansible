
# Search for AMI (based on settings in vars.yml) from which to 
# create a new instance.
  
- name: Find Current desired AMI in Region
  ec2_ami_find:
    region: "{{ target_region }}"
#   platform: "{{ target_platform }}"                                   # Platform does not seem to be reliably set on majority of ami's.
    virtualization_type: "{{ target_virt_type }}"
    owner: "{{ target_ami_owner }}"
    name: "{{ target_ami_name }}"
    no_result_action: fail
    sort: name
    sort_order: descending
  register: found_amis

  
# Set the search results to our target_ami_id which will be
# used to create the instance.
   
- set_fact:
    target_ami_id: "{{ (found_amis.results | first).ami_id }}"
    
    
# Create new instance from target_ami_id    

- name: Create Windows Based Instances
  ec2:
    region: "{{ target_region }}"
    image: "{{ target_ami_id }}"
    instance_type: "{{ target_instance_type }}"
    vpc_subnet_id: "{{ target_vpc_subnet_id }}"
    user_data: "{{ lookup('template', 'userdata_windows.j2') }}"
    instance_tags:
      Name: "{{ target_instance_name }}"
    exact_count: 1
    count_tag:
      Name: "{{ target_instance_name }}"
    group_id: "{{ target_security_groups }}"
    key_name: "{{ target_ec2_key }}"
    wait: true
    wait_timeout: 500
  when: target_platform == "windows"

- name: Create Linux Bases Instances 
  ec2:
    region: "{{ target_region }}"
    image: "{{ target_ami_id }}"
    instance_type: "{{ target_instance_type }}"
    vpc_subnet_id: "{{ target_vpc_subnet_id }}"
    user_data: "{{ lookup('template', 'userdata_linux.j2') }}"
    instance_tags:
      Name: "{{ target_instance_name }}"
    exact_count: 1
    count_tag:
      Name: "{{ target_instance_name }}"
    group_id: "{{ target_security_groups }}"
    key_name: "{{ target_ec2_key }}"
    wait: true
    wait_timeout: 500
  when: target_platform == "linux"       

  register: created_instance


# Add newly created instance to inventory


